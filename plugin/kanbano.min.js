!function () { this.Kanbano = function () { var t = { board: ".board", cards: ".card", cloneCardClass: "cloned-card", cloneListClass: "cloned-list", activeCardClass: "dragging-active-card", activeListClass: "dragging-active-list", lists: ".list", listTitle: ".list-title", listContent: ".list-content", lockClass: "lock", direction: "vertical" }; arguments[0] && "object" == typeof arguments[0] ? this.options = function (t, e) { var n; for (n in e) e.hasOwnProperty(n) && (t[n] = e[n]); return t }(t, arguments[0]) : this.options = t }, Kanbano.prototype.init = function () { var t, e, n, o, i, l, r, c, s, a, d, g, f, u, p, v, h = this, C = 0, B = 0, R = 0, y = 0, I = document.body, m = window, b = document.querySelector(h.options.board); document.querySelectorAll(h.options.cards).forEach(function (t) { t.style.cursor = "grab" }), document.querySelectorAll(h.options.lists).forEach(function (t) { t.querySelector(h.options.listTitle).style.cursor = "grab" }), m.addEventListener("mousedown", function (n) { var o = document.querySelectorAll(h.options.lists); "touchstart" === n.type ? (t = n.touches[0].clientX, e = n.touches[0].clientY, n.touches[0].clientX, n.touches[0].clientY) : (n.preventDefault(), t = n.clientX, e = n.clientY, n.clientX, n.clientY); o.forEach(function (t, e) { var o = t.querySelectorAll(h.options.cards), r = t.querySelector(h.options.listTitle); (n.target === r || r.contains(n.target)) && (l = t, f = !0, u = e), o.forEach(function (o, l) { (n.target === o || o.contains(n.target)) && (i = o, v = t, g = !0, p = l, u = e) }) }) }, !1), m.addEventListener("mousemove", function (u) { if (i) { if (g) { var p = i.cloneNode(!0); I.style.position = "relative", I.style.overflow = "hidden", (d = document.createElement("div")).classList.add(h.options.cloneCardClass), d.style.position = "absolute", d.style.zIndex = "1000", I.prepend(d), d.appendChild(p), C = i.getBoundingClientRect().left, B = i.getBoundingClientRect().top, R = i.getBoundingClientRect().right, y = i.getBoundingClientRect().bottom, d.style.width = i.offsetWidth + "px", d.style.height = i.offsetHeight + "px", p.style.cursor = "grabbing", d.firstChild.style.margin = "0px", d.style.left = C + "px", d.style.top = B + "px", i.classList.add(h.options.activeCardClass), g = !1 } "touchmove" === u.type ? (n = u.touches[0].clientX - t + C, o = u.touches[0].clientY - e + B) : (u.preventDefault(), n = u.clientX - t + C, o = u.clientY - e + B); var v = d.getBoundingClientRect().top + d.offsetHeight / 2, m = d.getBoundingClientRect().left + d.offsetWidth / 2, L = document.querySelectorAll(h.options.lists); i.classList.contains(h.options.lockClass) || (d.style.left = n + "px"), d.style.top = o + "px", L.forEach(function (t) { if ("vertical" === h.options.direction) { var e = t.getBoundingClientRect().left, n = t.getBoundingClientRect().right; if (m > e && m < n) { var o = t.querySelectorAll(h.options.cards); if (o.length) { var l = []; o.forEach(function (t) { var e = t.getBoundingClientRect().top + d.offsetHeight / 2; l.push(Math.abs(v - e)) }); var r = l.indexOf(Math.min.apply(Math, l)), c = o[r]; c !== i && (v > c.getBoundingClientRect().top + d.offsetHeight / 2 ? c.parentNode.insertBefore(i, c.nextSibling) : v < c.getBoundingClientRect().top + d.offsetHeight / 2 && c.parentNode.insertBefore(i, c)) } else t.querySelector(h.options.listContent).appendChild(i) } } if ("horizontal" === h.options.direction) { var s = t.getBoundingClientRect().top, a = t.getBoundingClientRect().bottom; if (v > s && v < a) { var o = t.querySelectorAll(h.options.cards); if (o.length) { var l = []; o.forEach(function (t) { var e = t.getBoundingClientRect().left + d.offsetWidth / 2; l.push(Math.abs(m - e)) }); var r = l.indexOf(Math.min.apply(Math, l)), c = o[r]; c !== i && (m > c.getBoundingClientRect().left + d.offsetWidth / 2 ? c.parentNode.insertBefore(i, c.nextSibling) : m < c.getBoundingClientRect().left + d.offsetWidth / 2 && c.parentNode.insertBefore(i, c)) } else t.querySelector(h.options.listContent).appendChild(i) } } }), L.forEach(function (t) { if (t.contains(i)) { var e = t.querySelector(h.options.listContent); if ("vertical" === h.options.direction) { if (d.getBoundingClientRect().bottom > e.getBoundingClientRect().bottom - 100 && e.scrollHeight - e.scrollTop !== e.clientHeight && d.getBoundingClientRect().top - B > 50) { var n = parseInt(.05 * (I.getBoundingClientRect().bottom - d.getBoundingClientRect().bottom)), o = parseInt(.02 * (d.getBoundingClientRect().bottom - e.getBoundingClientRect().bottom + 100)); clearInterval(r), r = setInterval(function () { e.scrollTop = e.scrollTop + o }, n), e.addEventListener("scroll", function () { e.scrollHeight - e.scrollTop === e.clientHeight && clearInterval(r) }) } else clearInterval(r); if (d.getBoundingClientRect().top < e.getBoundingClientRect().top + 100 && 0 !== e.scrollTop && y - d.getBoundingClientRect().bottom > 50) { var l = parseInt(.05 * d.getBoundingClientRect().top), g = parseInt(.02 * (e.getBoundingClientRect().top + 100 - d.getBoundingClientRect().top)); clearInterval(c), c = setInterval(function () { e.scrollTop = e.scrollTop - g }, l), e.addEventListener("scroll", function () { 0 === e.scrollTop && clearInterval(c) }) } else clearInterval(c) } if ("horizontal" === h.options.direction) { if (d.getBoundingClientRect().right > e.getBoundingClientRect().right - 100 && e.scrollWidth - e.scrollLeft !== e.clientWidth && d.getBoundingClientRect().left - C > 50) { var f = parseInt(.05 * (I.getBoundingClientRect().right - d.getBoundingClientRect().right)), u = parseInt(.02 * (d.getBoundingClientRect().right - e.getBoundingClientRect().right + 100)); clearInterval(s), s = setInterval(function () { e.scrollLeft = e.scrollLeft + u }, f), e.addEventListener("scroll", function () { e.scrollWidth - e.scrollLeft === e.clientWidth && clearInterval(s) }) } else clearInterval(s); if (d.getBoundingClientRect().left < e.getBoundingClientRect().left + 100 && 0 !== e.scrollLeft && R - d.getBoundingClientRect().right > 50) { var p = parseInt(.05 * d.getBoundingClientRect().left), v = parseInt(.02 * (e.getBoundingClientRect().left + 100 - d.getBoundingClientRect().left)); clearInterval(a), a = setInterval(function () { e.scrollLeft = e.scrollLeft - v }, p), e.addEventListener("scroll", function () { 0 === e.scrollLeft && clearInterval(a) }) } else clearInterval(a) } } }) } if (l) { if (f) { var E = l.cloneNode(!0); I.style.position = "relative", I.style.overflow = "hidden", (d = document.createElement("div")).classList.add(h.options.cloneListClass), d.style.position = "absolute", d.style.zIndex = "1000", I.prepend(d), d.appendChild(E), C = l.getBoundingClientRect().left, B = l.getBoundingClientRect().top, R = l.getBoundingClientRect().right, y = l.getBoundingClientRect().bottom, d.style.width = l.offsetWidth + "px", d.style.height = l.offsetHeight + "px", E.querySelector(h.options.listTitle).style.cursor = "grabbing", d.style.left = C + "px", d.style.top = B + "px", l.classList.add(h.options.activeListClass), f = !1 } "touchmove" === u.type ? (n = u.touches[0].clientX - t + C, o = u.touches[0].clientY - e + B) : (n = u.clientX - t + C, o = u.clientY - e + B); var v = d.getBoundingClientRect().top + d.offsetHeight / 2, m = d.getBoundingClientRect().left + d.offsetWidth / 2, L = document.querySelectorAll(h.options.lists), S = [], x = []; if (d.style.left = n + "px", l.classList.contains(h.options.lockClass) || (d.style.top = o + "px"), "vertical" === h.options.direction) { var q = []; L.forEach(function (t) { if (t !== l && t !== d.querySelector(".list")) { x.push(t); var e = t.getBoundingClientRect().left + t.offsetWidth / 2; q.push(Math.abs(e - m)) } }); var T = q.indexOf(Math.min.apply(Math, q)), H = x[T]; H && m > H.getBoundingClientRect().left && m < H.getBoundingClientRect().left + H.offsetWidth / 2 ? b.insertBefore(l, H.nextSibling) : H && m < H.getBoundingClientRect().right && m > H.getBoundingClientRect().right - H.offsetWidth / 2 && b.insertBefore(l, H) } if ("horizontal" === h.options.direction) { var W = []; L.forEach(function (t) { if (t !== l && t !== d.querySelector(".list")) { S.push(t); var e = t.getBoundingClientRect().top + t.offsetHeight / 2; W.push(Math.abs(e - v)) } }); var M = W.indexOf(Math.min.apply(Math, W)), A = S[M]; A && v > A.getBoundingClientRect().top && v < A.getBoundingClientRect().top + A.offsetHeight / 2 ? b.insertBefore(l, A.nextSibling) : A && v < A.getBoundingClientRect().bottom && v > A.getBoundingClientRect().bottom - A.offsetHeight / 2 && b.insertBefore(l, A) } } if (d) { if ("vertical" === h.options.direction) { if (d.getBoundingClientRect().right > b.getBoundingClientRect().right - 100 && b.scrollWidth - b.scrollLeft !== b.clientWidth && d.getBoundingClientRect().left - C > 50) { var X = parseInt(.05 * (d.getBoundingClientRect().right - b.getBoundingClientRect().right + 100)); clearInterval(s), s = setInterval(function () { b.scrollLeft = b.scrollLeft + X }, 10), b.addEventListener("scroll", function () { b.scrollWidth - b.scrollLeft === b.clientWidth && clearInterval(s) }) } else clearInterval(s); if (d.getBoundingClientRect().left < b.getBoundingClientRect().left + 100 && 0 !== b.scrollLeft && R - d.getBoundingClientRect().right > 50) { var Y = parseInt(.05 * (b.getBoundingClientRect().left + 100 - d.getBoundingClientRect().left)); clearInterval(a), a = setInterval(function () { b.scrollLeft = b.scrollLeft - Y }, 10), b.addEventListener("scroll", function () { 0 === b.scrollLeft && clearInterval(a) }) } else clearInterval(a) } if ("horizontal" === h.options.direction) { if (d.getBoundingClientRect().bottom > b.getBoundingClientRect().bottom - 100 && b.scrollHeight - b.scrollTop !== b.clientHeight && d.getBoundingClientRect().top - B > 50) { var w = parseInt(.05 * (d.getBoundingClientRect().bottom - b.getBoundingClientRect().bottom + 100)); clearInterval(r), r = setInterval(function () { b.scrollTop = b.scrollTop + w }, 10), b.addEventListener("scroll", function () { b.scrollHeight - b.scrollTop === b.clientHeight && clearInterval(r) }) } else clearInterval(r); if (d.getBoundingClientRect().top < b.getBoundingClientRect().top + 100 && 0 !== b.scrollTop && y - d.getBoundingClientRect().bottom > 50) { var z = parseInt(.05 * (b.getBoundingClientRect().top + 100 - d.getBoundingClientRect().top)); clearInterval(c), c = setInterval(function () { b.scrollTop = b.scrollTop - z }, 10), b.addEventListener("scroll", function () { 0 === b.scrollTop && clearInterval(c) }) } else clearInterval(c) } } "touchmove" === u.type ? (u.touches[0].clientX, u.touches[0].clientY) : (u.clientX, u.clientY) }, !1), m.addEventListener("mouseup", function (t) { d && (d.remove(), d = void 0); if (i) { var e = document.querySelectorAll(h.options.lists); e.forEach(function (t, e) { var n = t.querySelectorAll(h.options.cards); n.forEach(function (n, o) { i === n && (p === o && t === v || h.options.onCardMoved && h.options.onCardMoved({ from: { list: u + 1, order: p + 1 }, to: { list: e + 1, order: o + 1 } })) }) }), u = void 0, p = void 0, v = void 0, i.classList.remove(h.options.activeCardClass), i = void 0, I.removeAttribute("style"), C = 0, B = 0, R = 0, y = 0, clearInterval(c), clearInterval(r), clearInterval(s), clearInterval(a), g = !1 } if (l) { var e = document.querySelectorAll(h.options.lists); e.forEach(function (t, e) { l === t && u !== e && h.options.onListMoved && h.options.onListMoved({ from: { order: u + 1 }, to: { order: e + 1 } }) }), u = void 0, p = void 0, l.classList.remove(h.options.activeListClass), l = void 0, I.removeAttribute("style"), C = 0, B = 0, R = 0, y = 0, clearInterval(s), clearInterval(a), d && (d.remove(), d = void 0), f = !1 } }, !1) } }();